#display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
l<-vector(length=5)
i<-1
for(dog in dogs){
l[i]<-dog_display(dog)
i<-i+1
}
print(l)
display(Image(list(l)), method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
#display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-dog_display(dog)
i<-i+1
}
print(list)
display(Image(list(list)), method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
#display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-Image(dog_display(dog))
i<-i+1
}
print(list)
display(Image(list(list)), method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
#display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-Image(dog_display(dog))
i<-i+1
}
print(list)
display(Image(list), method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-Image(dog_display(dog))
i<-i+1
}
print(list)
display(Image(list), method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-Image(dog_display(dog))
i<-i+1
}
print(list)
display(list, method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-Image(dog_display(dog))
i<-i+1
}
print(list)
display(list, method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-(dog_display(dog))
i<-i+1
}
print(list)
display(list, method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
list[i]<-dog_display(dog)
i<-i+1
}
print(list)
display(list, method = "raster", all = TRUE,
nx = 3, spacing = 0.05, margin = 20, bg = "black")
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 200, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 50, h = 50)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
list<-vector(length=5)
i<-1
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
knitr::include_graphics("dog/Basenji.jpg")
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster")
#print(y)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster",drawGrid=FALSE)
#print(y)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
#y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
# show the scaled image
display(y,method="raster",drawGrid=FALSE)
#print(y)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret.jpg"))
knitr::include_graphics("dog/Basenji.jpg")
knitr::include_graphics("dog/Boxer.jpg")
knitr::include_graphics("dog/greatdane.jpg")
knitr::include_graphics("dog/labret.jpg")
knitr::include_graphics("dog/german_sheperd.jpg")
knitr::include_graphics("dog/labret2.jpg")
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret2.png"))
knitr::include_graphics("dog/labret2.png")
knitr::include_graphics("dog/labret.jpg")
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret2.png"))
x <- readImage(files="dog/labret2.png")
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/4)
dog_display<-function(path){
x <- readImage(files=path)
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/2)
return(y)
}
dog_displays<-function(dogs){
for(dog in dogs){
dog_display(dog)
}
}
dog_displays(c("dog/Basenji.jpg","dog/Boxer.jpg","dog/greatdane.jpg","dog/german_sheperd.jpg","dog/labret2.png"))
x <- readImage(files="dog/labret2.png")
# width and height of the original image
dim(x)[1:2]
# scale to a specific width and height
y <- resize(x, w = 100, h = 100)
# scale by 50%; the height is determined automatically so that
# the aspect ratio is preserved
y <- resize(x, dim(x)[1]/4)
display(y,method="raster")
knitr::include_graphics("dog/labret.jpg")
knitr::include_graphics("dog/labret.jpg")
knitr::include_graphics("dog/labret.jpg")
knitr::include_graphics("dog/greatdane.jpg")
?include_graphics
#for reading in fasta files
library("BiocManager")
#for reading in excel files
library("readxl")
#forgot
library("seqinr")
#for multiple sequence alignment
library("msa")
#for msa pretty print
library("tinytex")
#visualization of results
library("ggplot2")
#for clustering of DNA seqs
library("DECIPHER")
library("EBImage")
knitr::include_graphics("dog/Basenji.jpg")
knitr::include_graphics("dog/Boxer.jpg")
knitr::include_graphics("dog/greatdane.jpg")
knitr::include_graphics("dog/labret.jpg")
knitr::include_graphics("dog/german_sheperd.jpg")
#global variable
alignment_name<<-""
#notebook functions
#align fasta from file_name with names from name file (visualization purposes)
#after alignment displays msaprettyprint results for human readable data
mult_alingments<-function(file_name,fasta_names,name){
#read in fasta for all dogs
string_set<-readDNAStringSet(file=file_name,use.names=FALSE)
#read in seq names as list
table=read.table(fasta_names, header = FALSE, sep = "\n")[["V1"]]
#update names for pretty print
names(string_set)<-table
#align unnamed seqs
alignment<-msa(string_set)
#update global variable so multiple pretty print runs dont overrun eachother
alignment_name<<-gsub(" ", "", paste(name,".pdf"), fixed = TRUE)
#return pretty alignment, does not show up on my console
msaPrettyPrint(alignment, file=alignment_name,output="pdf", showNames="right",showLogo="top",askForOverwrite=FALSE,showNumbering="none",paperWidth=6,paperHeight=3)
return(alignment_name)
}
#have figure with white background, no gridline and only axis ticks, no lines
tune_figure<-function(fig,addons){
return(fig+theme_minimal()+theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()))
}
#create dendogram based on fasta files, names of items clustered in fasta_names, fig_title is for fig
create_dendogram<-function(fasta_path, fasta_names, fig_title){
dna <- string_set<-readDNAStringSet(file=fasta_path,use.names=FALSE)
names(dna)=read.table(fasta_names, header = FALSE, sep = "\n")[["V1"]]
d1 <- DistanceMatrix(dna, type="dist")
dendogram<-IdClusters(d1, method="complete", cutoff=0.05, showPlot=FALSE,
type="dendrogram")
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "black")
plot(as.dendrogram(dendogram), ylab = "Height", nodePar =
nodePar,main=fig_title)
}
#LCORL CALL
alignment<-mult_alingments("fasta/LCORL_file.txt","fasta/names.txt","LCORL")
#view pdf
knitr::include_graphics(alignment_name)
#IGF1 CALL
alignment<-mult_alingments("fasta/igf1.fasta","fasta/igf1_names.txt","igf1")
#view pdf
knitr::include_graphics(alignment_name)
#visualize size breakdown of dogs
snps<-read_excel("dog snps.xlsx")
#fix ordering of legend
snps$Name <- factor(snps$Name, levels = c("Basenji", "Boxer", "German_Shepherd","Labrador_retriever","Great_Dane"))
p<-ggplot(data = snps, aes(size))+scale_x_discrete(limits = c("S","L","XL"))+geom_bar(aes(fill = Name))+scale_fill_manual(values = c("deepskyblue4","brown2","brown","brown4","darkseagreen4"))
tune_figure(p,add_ons)
#visualize IGF1 SNP by size
p<-ggplot(data = snps, mapping = aes(y=igf1,x=size_num))+geom_point(size=4,alpha=0.6,color="darkseagreen4")
p+geom_jitter(size=4,alpha=0.6,color="darkseagreen4")
#visualize LCORL SNP by size
p<-ggplot(data = snps, mapping = aes(y=lcorl,x=size_num))+geom_point(size=4,alpha=0.6,color="darkseagreen4")
p+geom_jitter(size=4,alpha=0.6,color="darkseagreen4")
#Cluster LCORL extended fragment
create_dendogram("fasta/LCORL_file.txt", "fasta/names.txt", "LCORL Extended Fragment Dendogram")
#Cluster IGF1 extended fragment
create_dendogram("fasta/igf1.fasta", "fasta/igf1_names.txt", "IGF1 Extended Fragment Dendogram")
knitr::include_graphics("dog/labret.jpg")
